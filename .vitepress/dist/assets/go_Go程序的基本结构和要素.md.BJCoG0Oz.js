import{_ as o,c as e,o as a,a4 as t}from"./chunks/framework.DF40YQsC.js";const f=JSON.parse('{"title":"Go程序的基本结构和要素","description":"","frontmatter":{},"headers":[],"relativePath":"go/Go程序的基本结构和要素.md","filePath":"go/Go程序的基本结构和要素.md"}'),_={name:"go/Go程序的基本结构和要素.md"},c=t('<h1 id="go程序的基本结构和要素" tabindex="-1">Go程序的基本结构和要素 <a class="header-anchor" href="#go程序的基本结构和要素" aria-label="Permalink to &quot;Go程序的基本结构和要素&quot;">​</a></h1><h2 id="包的概念" tabindex="-1">包的概念 <a class="header-anchor" href="#包的概念" aria-label="Permalink to &quot;包的概念&quot;">​</a></h2><p>包是一种结构话代码的方式，每个程序都可以由包的概念组成，可以使用自身的包或者从其他包中导入内容。如同其他编程语言中的类库或者命名空间的概念，每个Go文件都属于且仅属于一个包，一个包由许多以<code>.go</code>为扩展名的源文件组成。因此文件名和包名一般来说都是不相同的。</p><p>程序员必须在源文件中非注释的第一行指明这个文件属于哪个包的，如<code>package main</code>。它表示一个可独立执行的程序。每个<code>go</code>应用程序都包含一个名字为<code>main</code>的包。</p><p>一个应用程序程序</p>',5),r=[c];function d(n,s,i,p,l,h){return a(),e("div",null,r)}const g=o(_,[["render",d]]);export{f as __pageData,g as default};
