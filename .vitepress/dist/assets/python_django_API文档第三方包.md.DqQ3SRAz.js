import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.DF40YQsC.js";const u=JSON.parse('{"title":"自动生成OpenAPI3.0","description":"","frontmatter":{},"headers":[],"relativePath":"python/django/API文档第三方包.md","filePath":"python/django/API文档第三方包.md"}'),t={name:"python/django/API文档第三方包.md"},n=e(`<h1 id="自动生成openapi3-0" tabindex="-1">自动生成OpenAPI3.0 <a class="header-anchor" href="#自动生成openapi3-0" aria-label="Permalink to &quot;自动生成OpenAPI3.0&quot;">​</a></h1><h2 id="drf-spectacular" tabindex="-1">drf-spectacular <a class="header-anchor" href="#drf-spectacular" aria-label="Permalink to &quot;drf-spectacular&quot;">​</a></h2><p><code>drf-spectacular</code>是一个<code>django rest framework</code>的库，它能够自动生成<code>openapi3.0</code>的接口文档。并提供<code>Swagger ui</code>洁面。以下是它的功能：</p><ol><li>自动生成OpenAPI3.0规范：它能够从drf的序列化器、视图和视图集等组件中自动提取信息，生成完整的OpenAPI规范文档。</li><li>Swagger UI集成：它提供Sagger UI的集成，允许开发者和最终用户通过一个交互式的Web界面来浏览和测试API。</li><li>灵活性和定制化：它允许开发者通过etend_schema装饰器等机制来定制API文档，以满足特定需求。</li><li>认证支持：它支持DRF等原生认证类，并且可以容易地扩展以支持自定义认证方式。</li><li>多版本支持：它支持OpenAPI3.1，允许更高级的规范特性。</li><li>国际化支持：它支持国际化（i18n)，可以生成多语言的API文档。</li><li>请求/响应/参数示例：它支持为API文档添加示例，帮助用户理解如何使用API。</li><li>从docstrings提取描述：它能够从Python的文档字符串中提取描述信息，以丰富API文档的内容。</li><li>扩展规范：支持在info、operations、parameters、components、security schemes中添加x-*扩展规范。</li><li><strong>合理的命名</strong>：提供基于路径的 <code>operation_id</code> 命名策略，使得操作 ID 更加清晰易懂4。</li><li><strong>独立的 UI 安装</strong>：对于无法直接访问互联网的环境，<code>drf-spectacular</code> 提供了 <code>drf-spectacular-sidecar</code> 包，以便离线环境中使用 Swagger UI 或 Redoc4。</li><li><strong>支持多种 DRF 特性</strong>：包括对 <code>django-polymorphic</code>、<code>djangorestframework-jwt</code>、<code>dj-rest-auth</code> 等的支持4。</li><li><strong>Pydantic 支持</strong>：对 Pydantic（版本 &gt;=2.0）的支持，允许使用 Pydantic 模型作为 DRF 序列化器4。</li></ol><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> drf-spectacular</span></span></code></pre></div><h3 id="添加到installed-apps" tabindex="-1">添加到INSTALLED_APPS <a class="header-anchor" href="#添加到installed-apps" aria-label="Permalink to &quot;添加到INSTALLED_APPS&quot;">​</a></h3><p>在你的django项目的<code>settings.py</code>文件中，将<code>drf-spectacular</code>添加到<code>INSTALLED_APPS</code>列表中。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INSTALLED_APPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;drf_spectacular&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="配置drf默认schema类" tabindex="-1">配置DRF默认schema类 <a class="header-anchor" href="#配置drf默认schema类" aria-label="Permalink to &quot;配置DRF默认schema类&quot;">​</a></h3><p>在<code>settings.py</code>中，设置DRF的<code>DEFAULT_SCHEMA_CLASS</code>为<code>drf_spectacular.openapi.AutoSchema</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>REST_FRAMEWORK = {</span></span>
<span class="line"><span>&quot;DEFAULT_SCHEMA_CLASS&quot;:&quot;drf_spectacular.openapi.AutoSchema&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="配置drf-spectacular" tabindex="-1">配置drf-spectacular <a class="header-anchor" href="#配置drf-spectacular" aria-label="Permalink to &quot;配置drf-spectacular&quot;">​</a></h3><p>你可以设置一些额外的配置，比如API的标题、版本等。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SPECTACULAR_SETTINGS = {</span></span>
<span class="line"><span>&quot;TITLE&quot;:&quot;My API&quot;,</span></span>
<span class="line"><span>&quot;DESCRIPTION&quot;:&quot;My API Description&quot;,</span></span>
<span class="line"><span>&quot;VERSIon&quot;:&quot;1.0.0&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="添加url配置" tabindex="-1">添加URL配置 <a class="header-anchor" href="#添加url配置" aria-label="Permalink to &quot;添加URL配置&quot;">​</a></h3><p>在你的<code>urls.py</code>文件中，添加<code>drf-spectacular</code>提供的视图以访问自动生成的API文档</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drf_spectacular.views </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpectacularAPIView, SpectacularSwaggerView, SpectacularRedocView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.urls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlpatterns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;api/schema/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpectacularAPIView.as_view(), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api/swagger-ui/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpectacularSwaggerView.as_view(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;swagger-ui&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api/redoc/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SpectacularRedocView.as_view(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">url_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;redoc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ol><li><strong>访问文档</strong>： 完成以上步骤后，启动你的 Django 项目，并在浏览器中访问 <code>/api/schema/</code> 路径查看 OpenAPI 规范，或者 <code>/api/swagger-ui/</code> 和 <code>/api/redoc/</code> 来查看 Swagger UI 和 Redoc 文档。</li><li><strong>自定义文档</strong>： 如果需要对文档进行自定义，可以使用 <code>extend_schema</code> 装饰器来添加额外的信息，如响应示例、扩展字段等。</li><li><strong>离线环境</strong>： 对于无法访问互联网的环境，可以使用 <code>drf-spectacular-sidecar</code> 来获取 Swagger UI 或 Redoc 的静态文件。</li><li><strong>查看文档</strong>： 访问 <code>/api/swagger-ui/</code> 或 <code>/api/redoc/</code> 可以查看和测试 API 文档。</li></ol>`,19),p=[n];function l(h,o,r,c,d,k){return i(),a("div",null,p)}const E=s(t,[["render",l]]);export{u as __pageData,E as default};
